\name{Kinhom}
\alias{Kinhom}
\title{Inhomogeneous K-function}
\description{
  Estimates the inhomogeneous \eqn{K} function of
  a non-stationary point pattern.
}
\usage{
  Kinhom(X, lambda, \dots, r = NULL, breaks = NULL,
    correction=c("border", "bord.modif", "isotropic", "translate"),
    nlarge = 500, lambda2)
}
\arguments{
  \item{X}{
    The observed data point pattern,
    from which an estimate of the inhomogeneous \eqn{K} function
    will be computed.
    An object of class \code{"ppp"}
    or in a format recognised by \code{\link{as.ppp}()}
  }
  \item{lambda}{
    Values of the estimated intensity function.
    Either a vector giving the intensity values
    at the points of the pattern \code{X},
    or a pixel image (object of class \code{"im"}) giving the
    intensity values at all locations.
  }
  \item{\dots}{
    Ignored.
  }
  \item{r}{
    vector of values for the argument \eqn{r} at which
    the inhomogeneous \eqn{K} function
    should be evaluated. Not normally given by the user;
    there is a sensible default.
  }
  \item{breaks}{
    An alternative to the argument \code{r}.
    Not normally invoked by the user.
    See Details.
  }
  \item{correction}{
      A character vector containing any selection of the
      options \code{"border"}, \code{"bord.modif"},
      \code{"isotropic"}, \code{"Ripley"} or \code{"translate"}.
      It specifies the edge correction(s) to be applied.
  }
  \item{nlarge}{
    Optional. Efficiency threshold.
    If the number of points exceeds \code{nlarge}, then only the
    border correction will be computed, using a fast algorithm.
  }
  \item{lambda2}{
    Advanced use only.
    Matrix containing estimates of the products
    \eqn{\lambda(x_i)\lambda(x_j)}{lambda(x[i]) * lambda(x[j])}
    of the intensities at each pair of data points 
    \eqn{x_i}{x[i]} and \eqn{x_j}{x[j]}. 
  }
}
\value{
  An object of class \code{"fv"} (see \code{\link{fv.object}}).
  
  Essentially a data frame containing at least the following columns,
  \item{r}{the vector of values of the argument \eqn{r} 
    at which the pair correlation function \eqn{g(r)} has been  estimated
  }
  \item{theo}{vector of values of \eqn{\pi r^2}{pi * r^2},
    the theoretical value of \eqn{K_{\rm inhom}(r)}{Kinhom(r)}
    for an inhomogeneous Poisson process
  }
  and containing additional columns
  according to the choice specified in the \code{correction}
  argument. The additional columns are named
  \code{border}, \code{trans} and \code{iso}
  and give the estimated values of 
  \eqn{K_{\rm inhom}(r)}{Kinhom(r)}
  using the border correction, translation correction,
  and Ripley isotropic correction, respectively.
}
\details{
  This computes a generalisation of the \eqn{K} function
  for inhomogeneous point patterns, proposed by
  Baddeley, Moller and Waagepetersen (2000).
  
  The ``ordinary'' \eqn{K} function
  (variously known as the reduced second order moment function
  and Ripley's \eqn{K} function), is
  described under \code{\link{Kest}}. It is defined only
  for stationary point processes.
  
  The inhomogeneous \eqn{K} function
  \eqn{K_{\rm inhom}(r)}{Kinhom(r)}
  is a direct generalisation to nonstationary point processes.
  Suppose \eqn{x} is a point process with non-constant intensity
  \eqn{\lambda(u)}{lambda(u)} at each location \eqn{u}.
  Define \eqn{K_{\rm inhom}(r)}{Kinhom(r)} to be the expected
  value, given that \eqn{u} is a point of \eqn{x},
  of the sum of all terms
  \eqn{1/\lambda(u)\lambda(x_j)}{1/lambda(u)lambda(x[j])}
  over all points \eqn{x_j}{x[j]}
  in the process separated from \eqn{u} by a distance less than \eqn{r}.
  This reduces to the ordinary \eqn{K} function if
  \eqn{\lambda()}{lambda()} is constant.
  If \eqn{x} is an inhomogeneous Poisson process with intensity
  function \eqn{\lambda(u)}{lambda(u)}, then
  \eqn{K_{\rm inhom}(r) = \pi r^2}{Kinhom(r) = pi * r^2}.

  This allows us to inspect a point pattern for evidence of 
  interpoint interactions after allowing for spatial inhomogeneity
  of the pattern. Values 
  \eqn{K_{\rm inhom}(r) > \pi r^2}{Kinhom(r) > pi * r^2}
  are suggestive of clustering.

  The argument \code{lambda} must supply the
  (estimated) values of the intensity function \eqn{\lambda}{lambda}.
  It may be either
  \describe{
    \item{a numeric vector}{containing the values
      of the intensity function at the points of the pattern \code{X}.
      The length of the vector \code{lambda} should
      be equal to the number of points in the pattern \code{X}.
      The value \code{lambda[i]} is assumed to be the 
      the (estimated) value of the intensity
      \eqn{\lambda(x_i)}{lambda(x[i])} for
      the point \eqn{x_i}{x[i]} of the pattern \eqn{X}.
    }
    \item{a pixel image}{(object of class \code{"im"})
      assumed to contain the values of the intensity function
      at all locations in the window.
    }
  }

  Edge corrections are used to correct bias in the estimation
  of \eqn{K_{\rm inhom}}{Kinhom}.
  Each edge-corrected estimate of \eqn{K_{\rm inhom}(r)}{Kinhom(r)} is
  of the form
  \deqn{\widehat K_{\rm inhom}(r) = \sum_i \sum_j \frac{1\{d_{ij} \le
      r\} e(x_i,x_j,r)}{\lambda(x_i)\lambda(x_j)}
  }{K^inhom(r)= sum[i] sum[j] 1(d[i,j] <= r) * 
    e(x[i],x[j],r)/(lambda(x[i]) * lambda(x[j]))
  }
  where \eqn{d_{ij}}{d[i,j]} is the distance between points
  \eqn{x_i}{x[i]} and \eqn{x_j}{x[j]}, and
  \eqn{e(x_i,x_j,r)}{e(x[i],x[j],r)} is
  an edge correction factor. For the `border' correction,
  \deqn{
    e(x_i,x_j,r) =
    \frac{1(b_i > r)}{\sum_j 1(b_j > r)/\lambda(x_j)}
  }{
    1(b[i] > r)/(sum[j] 1(b[j] > r)/lambda(x[j]))
  }
  where \eqn{b_i}{b[i]} is the distance from \eqn{x_i}{x[i]}
  to the boundary of the window. For the `modified border'
  correction, 
  \deqn{
    e(x_i,x_j,r) =
    \frac{1(b_i > r)}{\mbox{area}(W \ominus r)}
  }{
    1(b[i] > r)/area(W [-] r)
  }
  where \eqn{W \ominus r}{W [-] r} is the eroded window obtained
  by trimming a margin of width \eqn{r} from the border of the original
  window.
  For the `translation' correction,
  \deqn{
    e(x_i,x_j,r) =
    \frac 1 {\mbox{area}(W \cap (W + (x_j - x_i)))}
  }{
    1/area(W intersect (W + x[j]-x[i]))
  }
  and for the `isotropic' correction,
  \deqn{
    e(x_i,x_j,r) =
    \frac 1 {\mbox{area}(W) g(x_i,x_j)}
  }{
    1/(area(W) g(x[i],x[j]))
  }
  where \eqn{g(x_i,x_j)}{g(x[i],x[j])} is the fraction of the
  circumference of the circle with centre \eqn{x_i}{x[i]} and radius
  \eqn{||x_i - x_j||}{||x[i]-x[j]||} which lies inside the window.

  If the point pattern \code{X} contains more than about 1000 points,
  the isotropic and translation edge corrections can be computationally
  prohibitive. The computations for the border method are much faster,
  and are statistically efficient when there are large numbers of
  points. Accordingly, if the number of points in \code{X} exceeds
  the threshold \code{nlarge}, then only the border correction will be
  computed. Setting \code{nlarge=Inf} will prevent this from happening.
  Setting \code{nlarge=0} is equivalent to selecting only the border
  correction with \code{correction="border"}.

  The pair correlation function can also be applied to the
  result of \code{Kinhom}; see \code{\link{pcf}}.
}
\references{
  Baddeley, A., Moller, J. and Waagepetersen, R. (2000)
  Non- and semiparametric estimation of interaction in
  inhomogeneous point patterns.
  \emph{Statistica Neerlandica} \bold{54}, 329--350.
}
\seealso{
  \code{\link{Kest}},
  \code{\link{pcf}}
}
\examples{
  data(lansing)
  # inhomogeneous pattern of maples
  X <- unmark(split(lansing)$maple)
  \testonly{
     sub <- sample(c(TRUE,FALSE), X$n, replace=TRUE, prob=c(0.1,0.9))
     X <- X[sub , ]
  }

  # (1) intensity function estimated by model-fitting
  # Fit spatial trend: polynomial in x and y coordinates
  fit <- ppm(X, ~ polynom(x,y,2), Poisson())
  # predict intensity values at points themselves
  lambda <- predict(fit, locations=X, type="trend")
  # inhomogeneous K function
  Ki <- Kinhom(X, lambda)
  plot(Ki)

  # (2) intensity function estimated by heavy smoothing
  smo <- density.ppp(X, sigma=0.1)
  # evaluate smoothed intensity at data points
  lambda <- smo[X]
  # inhomogeneous K function
  Ki <- Kinhom(X, lambda)
  plot(Ki)

  # (3) simulated data: known intensity function
  lamfun <- function(x,y) { 100 * x }
  # inhomogeneous Poisson process
  Y <- rpoispp(lamfun, 100, owin())
  # evaluate intensity at points of pattern
  lambda <- lamfun(Y$x, Y$y)
  # inhomogeneous K function
  Ki <- Kinhom(Y, lambda)
  plot(Ki)

  # How to make simulation envelopes:
  #      Example shows method (2)
  \dontrun{
  smo <- density.ppp(X, sigma=0.1)
  myKfun <- function(X, ..., lam) { Kinhom(X, lambda=lam[X], ...) }
  Ken <- envelope(X, myKfun, nsim=99,
                  simulate=expression(rpoispp(smo)),
                  lam=smo, correction="trans")
  plot(Ken)
  }
}
\author{Adrian Baddeley
  \email{adrian@maths.uwa.edu.au}
  \url{http://www.maths.uwa.edu.au/~adrian/}
  and Rolf Turner
  \email{rolf@math.unb.ca}
  \url{http://www.math.unb.ca/~rolf}
}
\keyword{spatial}
\keyword{nonparametric}
